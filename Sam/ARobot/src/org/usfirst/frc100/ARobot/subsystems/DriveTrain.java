// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc100.ARobot.subsystems;
import org.usfirst.frc100.ARobot.RobotMap;
import org.usfirst.frc100.ARobot.commands.*;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc100.ARobot.Robot;
/**
 *
 */
public class DriveTrain extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
   public SpeedController leftFrontMotor = RobotMap.driveTrainLeftFrontMotor;
    public SpeedController rightFrontMotor = RobotMap.driveTrainRightFrontMotor;
   public  SpeedController leftBackMotor = RobotMap.driveTrainLeftBackMotor;
   public SpeedController rightBackMotor = RobotMap.driveTrainRightBackMotor;
    RobotDrive robotDrive41 = RobotMap.driveTrainRobotDrive41;
   public Encoder encoder = RobotMap.driveTrainEncoder;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    double currentrate = 0;
    double previousrate = 0;
    Timer timer = new Timer();
    double elapsedtime = .0001;
    double leftstickmax = 1;
    double leftstickmin = -1;
    double lowerlimit;
    double upperlimit;

    public void arcadeDrive(double x, double y){
        robotDrive41.arcadeDrive(x,y);
    }
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void initDefaultCommand() {
        
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        // Set the default command for a subsystem here.
        setDefaultCommand(new Drive());
    }
    
    public void betterArcadeDrive(double x, double y){
        robotDrive41.arcadeDrive(x,y);
        SmartDashboard.putNumber("upperlimit", upperlimit);
        SmartDashboard.putNumber("lowerlimit", lowerlimit);
        timer.stop();
    	elapsedtime = timer.get() ;
        currentrate = Robot.driveTrain.encoder.getRate();
        if((currentrate-previousrate)/elapsedtime > upperlimit){
        	leftstickmax-=.005;//check this constant
        	if(leftstickmax < Robot.oi.leftstick.getY()){
        		Robot.driveTrain.rightFrontMotor.set(leftstickmax);
                        Robot.driveTrain.leftFrontMotor.set(leftstickmax);
                        Robot.driveTrain.rightBackMotor.set(leftstickmax);
                        Robot.driveTrain.leftBackMotor.set(leftstickmax);
        	}
        }else if((currentrate-previousrate)/elapsedtime < lowerlimit){
        	leftstickmin+=.05;
        	if(leftstickmin < Robot.oi.leftstick.getY()){
        		Robot.driveTrain.rightFrontMotor.set(leftstickmin);
                        Robot.driveTrain.leftFrontMotor.set(leftstickmin);
                        Robot.driveTrain.rightBackMotor.set(leftstickmin);
                        Robot.driveTrain.leftBackMotor.set(leftstickmin);
        	}
        }else if ((currentrate-previousrate)/elapsedtime < upperlimit && (currentrate-previousrate)/elapsedtime > lowerlimit){
        	leftstickmax = 1;
        	leftstickmin = -1;
        }
        
        timer.start();
        SmartDashboard.putNumber("Encoder Pulses",encoder.getRaw());
        SmartDashboard.putNumber("Rate", encoder.getRate());//same as current rate
        
        SmartDashboard.putNumber("Acceleration", (currentrate-previousrate)/elapsedtime);
        SmartDashboard.putNumber("TrueAcceleration", (encoder.getRate() - previousrate)/elapsedtime);
        SmartDashboard.putNumber("Time", elapsedtime);
        SmartDashboard.putNumber("Previous Rate", previousrate);
        SmartDashboard.putNumber("Current Rate", currentrate);
        SmartDashboard.putBoolean("LimitExceeded", (currentrate-previousrate)/elapsedtime > upperlimit );
        
        previousrate = currentrate;
        if(Robot.oi.leftstick.getRawButton(1)) {
            encoder.reset();
        }
        upperlimit = SmartDashboard.getNumber("upperlimit");
        lowerlimit = SmartDashboard.getNumber("lowerlimit");
        System.out.println(upperlimit);
    }
}
