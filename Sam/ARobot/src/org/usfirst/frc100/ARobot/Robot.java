// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc100.ARobot;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc100.ARobot.commands.*;
import org.usfirst.frc100.ARobot.subsystems.*;
/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {
    Command autonomousCommand;
    public static OI oi;
	double currentrate = 0;
	double previousrate = 0;
	Timer timer = new Timer();
	double elapsedtime = .0001;
	double leftstickmax = 1;
	double leftstickmin = -1;
        double lowerlimit;
        double upperlimit;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static DriveTrain driveTrain;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
        lowerlimit = -1250;
	upperlimit = 216;
	RobotMap.init();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
        driveTrain = new DriveTrain();
        Robot.driveTrain.encoder.setDistancePerPulse(-.0186252);//inches per second squared
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // This MUST be here. If the OI creates Commands (which it very likely
        // will), constructing it during the construction of CommandBase (from
        // which commands extend), subsystems are not guaranteed to be
        // yet. Thus, their requires() statements may grab null pointers. Bad
        // news. Don't move it.
        
	
        // instantiate the command used for the autonomous period
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        autonomousCommand = new AutonomousCommand();
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        oi = new OI();
    }
    public void autonomousInit() {
        // schedule the autonomous command (example)
        if (autonomousCommand != null) autonomousCommand.start();
    }
    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }
    public void teleopInit() {
	// This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to 
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
    }
    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
        SmartDashboard.putNumber("upperlimit", upperlimit);
        SmartDashboard.putNumber("lowerlimit", lowerlimit);
        
        Scheduler.getInstance().run();
         timer.stop();
    	elapsedtime = timer.get() ;
        currentrate = Robot.driveTrain.encoder.getRate();
        if((currentrate-previousrate)/elapsedtime > upperlimit){
        	leftstickmax-=.005;//check this constant
        	if(leftstickmax < Robot.oi.leftstick.getY()){
        		Robot.driveTrain.rightFrontMotor.set(leftstickmax);
                        Robot.driveTrain.leftFrontMotor.set(leftstickmax);
                        Robot.driveTrain.rightBackMotor.set(leftstickmax);
                        Robot.driveTrain.leftBackMotor.set(leftstickmax);
        	}
        }else if((currentrate-previousrate)/elapsedtime < lowerlimit){
        	leftstickmin+=.05;
        	if(leftstickmin < Robot.oi.leftstick.getY()){
        		Robot.driveTrain.rightFrontMotor.set(leftstickmin);
                        Robot.driveTrain.leftFrontMotor.set(leftstickmin);
                        Robot.driveTrain.rightBackMotor.set(leftstickmin);
                        Robot.driveTrain.leftBackMotor.set(leftstickmin);
        	}
        }else if ((currentrate-previousrate)/elapsedtime < upperlimit && (currentrate-previousrate)/elapsedtime > lowerlimit){
        	leftstickmax = 1;
        	leftstickmin = -1;
        }
        
        timer.start();
        SmartDashboard.putNumber("Encoder Pulses",driveTrain.encoder.getRaw());
        SmartDashboard.putNumber("Rate", driveTrain.encoder.getRate());//same as current rate
        
        SmartDashboard.putNumber("Acceleration", (currentrate-previousrate)/elapsedtime);
        SmartDashboard.putNumber("TrueAcceleration", (driveTrain.encoder.getRate() - previousrate)/elapsedtime);
        SmartDashboard.putNumber("Time", elapsedtime);
        SmartDashboard.putNumber("Previous Rate", previousrate);
        SmartDashboard.putNumber("Current Rate", currentrate);
        SmartDashboard.putBoolean("LimitExceeded", (currentrate-previousrate)/elapsedtime > upperlimit );
        
        previousrate = currentrate;
        if(Robot.oi.leftstick.getRawButton(1)) {
            driveTrain.encoder.reset();
        }
        upperlimit = SmartDashboard.getNumber("upperlimit");
        lowerlimit = SmartDashboard.getNumber("lowerlimit");
        System.out.println(upperlimit);
        
    }
    /**
     * This function called periodically during test mode
     */
    public void testPeriodic() {
        LiveWindow.run();
    }
}
