package org.usfirst.frc100.Robot2015.subsystems;

import org.usfirst.frc100.Robot2015.RobotMap;
import org.usfirst.frc100.Robot2015.commands.*;

import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.PIDSource.PIDSourceParameter;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 * The "butterslide" drivetrain of the robot.
 */
public class Drivetrain extends Subsystem {
	
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    SpeedController leftMotor = RobotMap.drivetrainLeftMotor;
    SpeedController rightMotor = RobotMap.drivetrainRightMotor;
    RobotDrive robotDrive = RobotMap.drivetrainRobotDrive;
    SpeedController slideMotor = RobotMap.drivetrainSlideMotor;
    DoubleSolenoid leftShifter = RobotMap.drivetrainLeftShifter;
    DoubleSolenoid rightShifter = RobotMap.drivetrainRightShifter;
    DoubleSolenoid butterflyPiston = RobotMap.drivetrainButterflyPiston;
    Encoder leftEncoder = RobotMap.drivetrainLeftEncoder;
    Encoder rightEncoder = RobotMap.drivetrainRightEncoder;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    double upperlimit = 100;
    double lowerlimit = -100;
    double currentrate = 0;
    double previousrate = 0;
    double joystickupperlimit = 1;
    double joysticklowerlimit = -1;
    double limit = 0;
    double time = 20;
    Timer timer = new Timer();

    // Sets the default command to Drive
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        setDefaultCommand(new Drive());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    }
    
    // Drives the robot using the given the speed, strafe, and turn values
    public void drive(double speed, double strafe, double turn) {
    	robotDrive.arcadeDrive(speed, turn);
    	slideMotor.set(strafe);
    }
    
    // Shifts to high or low gear
    public void shift(boolean highgear) {
    	if(highgear) {
    		leftShifter.set(DoubleSolenoid.Value.kForward);
    		rightShifter.set(DoubleSolenoid.Value.kForward);
    	} 
    	else {
    		leftShifter.set(DoubleSolenoid.Value.kReverse);
        	rightShifter.set(DoubleSolenoid.Value.kReverse);
    	}
    }
    
    // Switches to tank or slide drive
    public void switchDrive(boolean tankdrive) {
    	if(tankdrive) {
    		butterflyPiston.set(DoubleSolenoid.Value.kReverse);
    	}
    	else{
    		butterflyPiston.set(DoubleSolenoid.Value.kForward);
    	}	
     }
    
    // Returns whether the drivetrain is in slide mode
    public boolean isSlide() {
    	if(butterflyPiston.get() == DoubleSolenoid.Value.kForward){
    		return true;
    	}
    	else {
    		return false;
    	}
    }
    
    // Limits the acceleration.
    public void accelerationLimiter(double yaxis, double slide, double turn) {
    	
        timer.stop();
        time = timer.get();
        currentrate = leftEncoder.getRate();
        if ((currentrate - previousrate) / time > SmartDashboard.getNumber("Uppper Acceleration Limit", 100000000)) {
             drive(limit, slide, turn);
//            joystickupperlimit -= SmartDashboard.getNumber("Limit Step");
//            robotDrive41.arcadeDrive(joystickupperlimit, xaxis);
//            System.out.println("A");
        } else if ((currentrate - previousrate) / time < SmartDashboard.getNumber("Lower  Acceleration Limit", -100000000)) {
            drive(limit, slide, turn);
//            joysticklowerlimit += SmartDashboard.getNumber("Limit Step");
//            robotDrive41.arcadeDrive(joysticklowerlimit, xaxis);
//            System.out.println("B");
        } else {
            if(yaxis > limit) {
                limit += SmartDashboard.getNumber("Limit Step");
            }else{
               limit -= SmartDashboard.getNumber("Limit Step");
            }
             drive(limit, slide, turn);
//            joysticklowerlimit = yaxis;
//            joystickupperlimit = yaxis;
//            System.out.println("C");
        }
        SmartDashboard.putNumber("Limit:", limit);
        SmartDashboard.putNumber("Elapsed Time", time);
        SmartDashboard.putNumber("Current Rate", currentrate);
        SmartDashboard.putNumber("Previous Rate", previousrate);
        SmartDashboard.putNumber("Acceleration", (currentrate - previousrate) / time );
        previousrate = currentrate;
        timer.start();
    }
}
