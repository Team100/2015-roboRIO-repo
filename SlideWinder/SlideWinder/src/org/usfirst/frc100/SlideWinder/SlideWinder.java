package org.usfirst.frc100.SlideWinder;

import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc100.SlideWinder.commands.*;
import org.usfirst.frc100.SlideWinder.subsystems.*;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class SlideWinder extends IterativeRobot {
	
    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static Drivetrain drivetrain;
    public static Elevator elevator;
    public static Arm arm;
    public static Pneumatics pneumatics;
    public static Claw claw;
    public static CameraVision cameraVision;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public void robotInit() {
    	Preferences.read();
    	RobotMap.init();
    	
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        drivetrain = new Drivetrain();
        elevator = new Elevator();
        arm = new Arm();
        pneumatics = new Pneumatics();
        claw = new Claw();
        cameraVision = new CameraVision();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
        oi = new OI();
        
        SmartDashboard.putData(Scheduler.getInstance());
    }

    public void disabledInit(){
    	Scheduler.getInstance().removeAll();
    }

    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    public void autonomousInit() {
    	Scheduler.getInstance().removeAll();
    	int modeSelect = oi.selector();
		switch (modeSelect) {
			case 0:
				new AutoDrive(Preferences.getDouble("AutoDriveForward_Distance"), 0.0, false).start();
				break;
			case 1:
				new AutoModeOne_StackTotes().start();
				break;
			case 2:
				new AutoModeTwo_TakeRecycling().start();
				break;
			case 3:
				new AutoModeThree_TakeRecyclingWithVision().start();
				break;
			case 4:
				new AutoModeFour_TakeRecyclingWithLineReaders().start();
				break;
			default:
				new AutoDrive(0, 0 , false).start();
				break;
		}
        new UpdateDashboard().start();
        drivetrain.shift(true);
//        cameraVision.initCamera();
        
    }

    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
        pneumatics.run();
        System.out.println("It got to auto periodic");
//        cameraVision.getLineOffset();
    }

    public void teleopInit() {
    	Scheduler.getInstance().removeAll();
        new UpdateDashboard().start();
        new AutoCalibrateElevator().start();
        drivetrain.shift(true);
    }

    public void teleopPeriodic() {
        Scheduler.getInstance().run();
        pneumatics.run();
    }

    public void testPeriodic() {
        LiveWindow.run();
    }
}
