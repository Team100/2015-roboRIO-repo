package org.usfirst.frc100.Robot2015.subsystems;

import org.usfirst.frc100.Robot2015.PID;
import org.usfirst.frc100.Robot2015.RobotMap;
import org.usfirst.frc100.Robot2015.commands.*;

import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 * The autonomous arm used to grab recycling containers from the step.
 */
public class Arm extends Subsystem {
	
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	final double DEPLOY_MAX_CURRENT = 10;
    SpeedController deployMotor = RobotMap.armDeployMotor;
    SpeedController raiseMotor = RobotMap.armRaiseMotor;
    DoubleSolenoid piston = RobotMap.armPiston;
    DigitalInput containerSensor = RobotMap.armContainerSensor;
    AnalogPotentiometer potentiometer = RobotMap.armPotentiometer;
    double heightTarget = potentiometer.get();
    double standardDeviation = 1;
    DigitalInput armForwardLimit = RobotMap.armArmForwardLimit;
    DigitalInput armBackLimit = RobotMap.armArmBackLimit;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    }
    
    /**
     * 
     * @param raise value for height motor
     * @param extend value for extension motor
     */
    public void manualControl(double raise, double extend) {
    	raiseMotor.set(raise);
    	deployMotor.set(extend);
    }
    
    // Returns whether the arm's grabbing mechanism is closed
    public boolean isGrabbing() {
    	return piston.get() == DoubleSolenoid.Value.kForward;    	
    }
    
    /**
     *  Sets the arm to open or close the grabbing mechanism
     * @param grab whether the grabber should grab or release a bin
     */
    public void setGrab(boolean grab) {
    	if (grab) {
    		piston.set(DoubleSolenoid.Value.kForward); 
    	} else {
    		piston.set(DoubleSolenoid.Value.kReverse);
    	}
    }
    /**
     * Sets the arm to extend or retract the grabbing mechanism
     * @param extended whether the grabber should be extended or retracted
     */
    public void setDeploy(boolean extended) {
    	deployMotor.set(extended ? 1 : -1);
    	
    }
    
    /**
     * sets the arm to a particular height
     * @param height the value of the height between HEIGHT_MIN and HEIGHT_MAX
     * TODO add height limits
     */
    public void setArm(double height) {
    	heightTarget = height;
    }

    public void updateArm() {
    	if (heightTarget - potentiometer.get() > standardDeviation) {
    		raiseMotor.set(1);
    	} else if (heightTarget - potentiometer.get() < -standardDeviation) {
    		raiseMotor.set(-1);
    	} else {
    		raiseMotor.set(0);
    	}
    	if (armForwardLimit.get() || armBackLimit.get() || containerSensor.get()) {
    		deployMotor.set(0);
    	}
    }
    
    // Updates the SmartDashboard
    public void updateDashboard() {
    	SmartDashboard.putBoolean("Arm Grabbing", isGrabbing());
    	SmartDashboard.putBoolean("Arm Container Sensor", containerSensor.get());
    	SmartDashboard.putNumber("Arm Potentiometer", potentiometer.get());
    }
}
