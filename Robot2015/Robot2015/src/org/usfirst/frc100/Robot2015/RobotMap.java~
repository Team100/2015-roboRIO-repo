package org.usfirst.frc100.Robot2015;
    
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.CounterBase.EncodingType; import edu.wpi.first.wpilibj.PIDSource.PIDSourceParameter;

import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import java.util.Vector;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController drivetrainLeftMotor;
    public static SpeedController drivetrainRightMotor;
    public static RobotDrive drivetrainRobotDrive;
    public static SpeedController drivetrainSlideMotor;
    public static DoubleSolenoid drivetrainLeftShifter;
    public static DoubleSolenoid drivetrainRightShifter;
    public static DoubleSolenoid drivetrainButterflyPiston;
    public static Encoder drivetrainLeftEncoder;
    public static Encoder drivetrainRightEncoder;
    public static SpeedController elevatorMotor;
    public static Encoder elevatorEncoder;
    public static DoubleSolenoid elevatorBrake;
    public static SpeedController armDeployMotor;
    public static SpeedController armRaiseMotor;
    public static DoubleSolenoid armPiston;
    public static DigitalInput armContainerSensor;
    public static Compressor pneumaticsCompressor;
    public static DoubleSolenoid clawPiston;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        drivetrainLeftMotor = new VictorSP(0);
        LiveWindow.addActuator("Drivetrain", "LeftMotor", (VictorSP) drivetrainLeftMotor);
        
        drivetrainRightMotor = new VictorSP(1);
        LiveWindow.addActuator("Drivetrain", "RightMotor", (VictorSP) drivetrainRightMotor);
        
        drivetrainRobotDrive = new RobotDrive(drivetrainLeftMotor, drivetrainRightMotor);
        
        drivetrainRobotDrive.setSafetyEnabled(true);
        drivetrainRobotDrive.setExpiration(0.1);
        drivetrainRobotDrive.setSensitivity(0.5);
        drivetrainRobotDrive.setMaxOutput(1.0);
        

        drivetrainSlideMotor = new VictorSP(2);
        LiveWindow.addActuator("Drivetrain", "SlideMotor", (VictorSP) drivetrainSlideMotor);
        
        drivetrainLeftShifter = new DoubleSolenoid(0, 0, 1);      
        LiveWindow.addActuator("Drivetrain", "LeftShifter", drivetrainLeftShifter);
        
        drivetrainRightShifter = new DoubleSolenoid(0, 2, 3);      
        LiveWindow.addActuator("Drivetrain", "RightShifter", drivetrainRightShifter);
        
        drivetrainButterflyPiston = new DoubleSolenoid(0, 4, 5);      
        LiveWindow.addActuator("Drivetrain", "ButterflyPiston", drivetrainButterflyPiston);
        
        drivetrainLeftEncoder = new Encoder(0, 1, false, EncodingType.k4X);
        LiveWindow.addSensor("Drivetrain", "LeftEncoder", drivetrainLeftEncoder);
        drivetrainLeftEncoder.setDistancePerPulse(1.0);
        drivetrainLeftEncoder.setPIDSourceParameter(PIDSourceParameter.kRate);
        drivetrainRightEncoder = new Encoder(2, 3, false, EncodingType.k4X);
        LiveWindow.addSensor("Drivetrain", "RightEncoder", drivetrainRightEncoder);
        drivetrainRightEncoder.setDistancePerPulse(1.0);
        drivetrainRightEncoder.setPIDSourceParameter(PIDSourceParameter.kRate);
        elevatorMotor = new VictorSP(3);
        LiveWindow.addActuator("Elevator", "Motor", (VictorSP) elevatorMotor);
        
        elevatorEncoder = new Encoder(4, 5, false, EncodingType.k4X);
        LiveWindow.addSensor("Elevator", "Encoder", elevatorEncoder);
        elevatorEncoder.setDistancePerPulse(1.0);
        elevatorEncoder.setPIDSourceParameter(PIDSourceParameter.kRate);
        elevatorBrake = new DoubleSolenoid(1, 2, 3);      
        LiveWindow.addActuator("Elevator", "Brake", elevatorBrake);
        
        armDeployMotor = new VictorSP(4);
        LiveWindow.addActuator("Arm", "DeployMotor", (VictorSP) armDeployMotor);
        
        armRaiseMotor = new VictorSP(5);
        LiveWindow.addActuator("Arm", "RaiseMotor", (VictorSP) armRaiseMotor);
        
        armPiston = new DoubleSolenoid(0, 6, 7);      
        LiveWindow.addActuator("Arm", "Piston", armPiston);
        
        armContainerSensor = new DigitalInput(6);
        LiveWindow.addSensor("Arm", "ContainerSensor", armContainerSensor);
        
        pneumaticsCompressor = new Compressor(0);
        
        
        clawPiston = new DoubleSolenoid(1, 0, 1);      
        LiveWindow.addActuator("Claw", "Piston", clawPiston);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
